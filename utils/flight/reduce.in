#! @SHELL_EXE@

#__USAGE
#%C [-xa]
#  Run "saverun fix" to determine the data directory
#%C [-xa] directory
#  Operate on the specified directory
#
#  -x  Don't run extractions or analysis
#  -a  Don't run analysis
#
# Reduce performs a series of operations following a data run.
# If the data directory is not specified, reduce invokes saverun
# to create a new data directory.
#
# After the data directory is created and/or located, reduce will
# copy the data directory from the flight node to the GSE node.
# This copy step will be skipped if the flight node and the GSE
# node are the same or if the variable CopyData is set to "no"
# in Experiment.config. Also, if the target directory is specified
# using a relative path and it already exists relative to the
# current directory, no copying will take place. If the
# path exists relative to the flight directory, it may be copied
# to the GSE node, following the same rules as for newly created
# data directories.
#
# Next, if any extractions are defined (and -x is not specified),
# they will be executed, and any spreadsheets created will be moved
# into the corresponding analysis subdirectory (anal/$dir, where $dir
# is the name of the new data directory). Extractions are defined via
# the "Extractions" variable in Experiment.config.
#
# Finally, if an analysis script is defined via the "Analysis"
# variable in Experiment.config and -x or -a has not been
# selected, the analysis will be run.

opt_exts=yes
opt_anal=yes
CopyData=yes
FixDisk=no
Dircksum=no

. /usr/local/libexec/load_exconfig.sh
msgProgram='reduce'

function do_tar {
  # do_tar $run $dir
  run=$1
  src=$2
  t_run=$3
  
  gse="flight@$FlightNode"
  
  msgf 0 Retrieving $directory
  eval time ssh $gse tar -czf- -C $HomeDir/raw $t_run | tar -C raw/$run$flt -xzf-
}

#----------------------------------------------------------------
# Process command line options (-x, -a)
#----------------------------------------------------------------
while getopts "ax" option; do
  case $option in
  a) opt_anal=no;;
  x) opt_exts=no;;
  \?) echo; exit 1;;
  *) msgf 0 "Unsupported option: -$option";;
  esac
done
let sval=$OPTIND-1
shift $sval

#----------------------------------------------------------------
# Load the configuration file
#----------------------------------------------------------------

[ -z "$Experiment" ] && msgf 0 "Experiment undefined in Experiment.config"
export Experiment

if [ -n "$1" ]; then
  directory="$1"
else
  msgf 0 "Saving Run ..."
  saverun saverun_output.txt
  msgf 0 "Run Save Complete"
  [ -e saverun_output.txt ] || exit 0
  directory=`cat saverun_output.txt`
  [ -n "$directory" ] || msgf 3 "saverun output empty"
  rm saverun_output.txt
fi

trun=${directory#$HomeDir/raw/}
[ "$trun" = "$directory" ] && msgf 3 "trun ('$trun') identical to directory ('$directory'), HomeDir='$HomeDir'"
[ -d raw/$trun ] || msgf 3 "directory already copied (?)"

#----------------------------------------------------------------
# If we ran saverun, the directory name is relative to the
# flight directory. If it was specified on the command line,
# it may be relative to the GSE directory, relative to the
# flight directory, or absolute (beginning with /) In any
# case, if it is absolute or exists relative to the GSE
# directory, no copying is indicated.
#----------------------------------------------------------------
case "$directory" in
  \/*)
  # absolute address
  CopyData=no;;
  *)
  # relative address
  if [ -d "$directory" ]; then
    CopyData=no
  elif [ -z "$fltdir" ]; then
    pdirs="."
    [ -n "$FlightNode" ] && pdirs="$pdirs /net/$FlightNode$HomeDir"
    [ -n "$AltDir" ] && pdirs="$pdirs $AltDir"
    for pdir in $pdirs; do
      for ppdir in . raw/data raw/flight raw/preflt raw/cal raw/junk; do
        if [ -d $pdir/$ppdir/$directory ]; then
          fltdir=$pdir
          [ $pdir = . ] && CopyData=no
          [ $ppdir = . ] || directory=$ppdir/$directory
          break
        fi
      done
      [ -n "$fltdir" ] && break
    done
    
    # [ -n "$FlightNode" ] && fltdir=/net/$FlightNode$HomeDir
    # [ -z "$fltdir" -o ! -d "$fltdir/$directory" ] && fltdir=$AltDir
    
    [ -z "$fltdir" ] &&
        msgf 0 "Unable to locate data directory $directory"
    [ "$CopyData" != "yes" -a $fltdir != . ] &&
    directory=$fltdir/$directory
  fi;;
esac

# Copy_Data srcdir destdir
# Copies srcdir to destdir if CopySpace condition holds
# returns true on success, false otherwise.
function Copy_Data {
  # CopySpace defines the minimum number of kb that should be
  # left over after the copy.
  
  DoCopy=$CopyData
  SrcDir=$1
  DestDir=$2
  # typeset DestParent destspace hasmtpt srcmnt srcnode
  if [ "$DoCopy" = "yes" -a -n "$CopySpace" ]; then
    DestParent=`dirname $directory`
    [ -d $DestParent ] || mkdir -p $DestParent ||
      msgf 0 "Unable to create directory '$DestParent'"
    # pick 4th element of df output (free kb)
    set X `df $DestParent`
    let destspace=$5-$CopySpace
    if [ $destspace -ge 0 ]; then
      srcmnt=`realpath $SrcDir`
      srcnode=${srcmnt#//}
      srcnode=${srcnode%%/*}
      set X `on -n $srcnode du -sk $SrcDir`
      let destspace=destspace-$2
    fi
    if [ $destspace -lt 0 ]; then
      msgf 0 "Insufficient space, data will not be copied"
      DoCopy=no
    fi
  fi

  if [ "$DoCopy" = "yes" ]; then
    msgf 0 "Copying from $SrcDir to $DestDir ..."
    # cp -frc $SrcDir $DestDir
    do_tar $SrcDir $DestDir $trun
    return 0
  fi
  return 1
}

[ ! "$CopyData" = "yes" ] ||
  Copy_Data $fltdir/$directory $PWD/$directory ||
  directory=$fltdir/$directory

if [ -n "$CopyHook" ]; then
  eval $CopyHook
fi

#----------------------------------------------------------------
# Do Extractions if defined and not disabled
#----------------------------------------------------------------
[ -z "$Extractions" ] && echo reduce: No Extractions Defined && exit 0
[ "$opt_exts" = "no" ] && echo reduce: Extractions Disabled && exit 0

msgf 0 "Extraction Proceeding ..."
export Extractions ExtProducts RDR_OPTS
extract $directory || msgf 0 "Extraction Apparently Failed"

#----------------------------------------------------------------
# Analysis
#  Execute $Analysis if defined and not disabled
#  Analysis must be an executable (or executable script)
#  including any required options.
#
#  Analysis may refer to shell variables $directory and/or
#  $analdir as follows:
#    Analysis='anal/script -s $directory $analdir'
#  (Note the single quotes!)
#
#  In the usual case, analdir will simply be anal/950401.1.
#  The Analysis
#  will be run from the GSE directory, but the extracted
#  spreadsheets upon which Analysis will work are probably
#  located in $analdir, and the script and/or
#  program should cd there before beginning work. If the
#  extractions produce something other than spreadsheets,
#  those files should have been moved into this directory
#  by suitable definitions of ExtProducts.
#
#  It is my practice to store Analysis scripts in the anal
#  subdirectory, so a natural definition might be:
#   Analysis=anal/script
#     or
#   Analysis='anal/script -f opt $analdir'
#----------------------------------------------------------------

[ -z "$Analysis" ] && msgf 0 "No Analysis Defined" && exit 0
[ "$opt_anal" = "no" ] && msgf 0 "Analysis Disabled" && exit 0
analdir=anal/`basename $directory`
eval echo "\"reduce: Beginning Analysis: $Analysis\""
eval $Analysis
msgf 0 "Analysis Completed"
