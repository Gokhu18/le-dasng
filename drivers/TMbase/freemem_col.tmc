%{
  #include <stdint.h>
  #ifdef __QNXNTO__
  #include <sys/stat.h>
  #include <sys/syspage.h>
  #endif
  #include <errno.h>
  #include <limits.h>

  #ifndef __QNXNTO__
  #include "dasio/interface.h"

  class meminfo : public DAS_IO::Interface {
    public:
      meminfo();
      /**
       * @return Amount of memory that is free as a multiple of 20 kB
       */
      int32_t tm_freemem();
      int32_t MemTotal;
      int32_t MemFree;
      int32_t MemAvailable;
    private:
      bool update();
  };

  int32_t meminfo::tm_freemem() {
    update();
    int32_t oval = MemAvailable ? MemAvailable : MemFree;
    return oval;
  }

  meminfo::meminfo() : DAS_IO::Interface("meminfo", 200) {
    fd = open("/proc/meminfo", O_RDONLY);
    if (fd < 0) msg(MSG_FATAL, "Unable to open /proc/meminfo");
    MemTotal = 0;
    MemFree = 0;
    MemAvailable = 0;
    update();
    msg(0, "Total Memory is %u kB", MemTotal);
  }

  bool meminfo::update() {
    char KW3[31];
    int32_t MaybeAvailable;
    if (lseek(fd, 0, SEEK_SET) < 0) {
      msg(MSG_ERROR, "Error %d calling lseek", errno);
      return true;
    }
    if (fillbuf()) return true;
    cp = 0;
    if (not_str("MemTotal:") ||
        not_int32(MemTotal) ||
        not_str(" kB\nMemFree:") ||
        not_int32(MemFree) ||
        not_str(" kB\n") ||
        not_KW(KW3, ':') ||
        not_int32(MaybeAvailable)) {
      if (cp >= nc) report_err("%s: Short read in meminfo::update()", iname);
      consume(nc);
      return true;
    }
    if (strcmp(KW3,"MemAvailable") == 0)
      MemAvailable = MaybeAvailable;
    report_ok(nc);
    return false;
  }

  meminfo *minfo;
  
  #endif
  
  int32_t get_free_mem() {
  #ifdef __QNXNTO__
    int ret;
    uint64_t fr;
    struct stat64 sbuf;
    ret = stat64("/proc", &sbuf);
    if (ret == -1)
      nl_error(3, "Error %d from stat64(/proc)", errno);
    fr = sbuf.st_size / 1024;
    return (int32_t) fr;
  #else
    return minfo->tm_freemem();
  #endif
  }

  void report_total_mem() {
  #ifdef __QNXNTO__
    char *str = SYSPAGE_ENTRY(strings)->data;
    struct asinfo_entry *as = SYSPAGE_ENTRY(asinfo);
    uint64_t total = 0;
    unsigned num;
    double dtot;
    for (num = _syspage_ptr->asinfo.entry_size / sizeof(*as);
         num > 0; --num ) {
      if (strcmp(&str[as->name], "ram") == 0) {
        total += as->end - as->start + 1;
      }
      ++as;
    }
    dtot = (double) total;
    dtot /= (1024.*1024.);
    nl_error(0, "Total RAM: %.2lf MB", dtot);
  #else
    minfo = new meminfo();
  #endif
  }
  
%}

TM INITFUNC report_total_mem();

